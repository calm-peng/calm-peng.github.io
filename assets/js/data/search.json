[ { "title": "STL容器", "url": "/posts/STL%E5%AE%B9%E5%99%A8/", "categories": "语言, C\C++", "tags": "C/C++", "date": "2022-10-29 20:40:00 +0800", "snippet": "STL容器Vector基本使用(1)头文件 #include.(2)创建vector对象，vector vec;(3)尾部插入数字：vec.push_back(a)(4)使用下标访问元素，cout«vec[0]«endl;记住下标是从0开始的。(5)使用迭代器访问元素.vector&amp;lt;int&amp;gt;::iterator it;for(it=vec.begin();it!=vec.end();it++)cout&amp;lt;&amp;lt;*it&amp;lt;&amp;lt;endl;(6)插入元素： vec.insert(vec.begin()+i,a);在第i+..." }, { "title": "C++回调函数", "url": "/posts/C++%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0%E8%AF%A6%E8%A7%A3/", "categories": "语言, C\C++", "tags": "C/C++", "date": "2022-06-30 15:38:00 +0800", "snippet": "C++回调函数1、什么是回调函数回调函数本质上也是普通函数，只是调用机制有所区别——首先通过传参的形式将该函数的地址传递给其他函数，然后在其他函数中通过函数指针调用该函数。在其他函数中通过函数指针调用该函数的过程称为回调，而作为被调用的该函数则被称为回调函数。有人可能会疑惑何必多此一举，直接在其他函数中调用该函数就好，为何一定要通过指针中转。2、为什么需要回调函数这就不得不提到项目联合开发带来的必然后果——接口的兼容性问题。举个超级简单的例子：程序员小A和程序员小B联合开发一个项目，要求小A开发的函数必须为小B开发的函数提供灵活可用的接口。 假如小A小B是好朋友，他们天天在一起，而且也不..." }, { "title": "C/C++/中宏特殊字符的含义及用法总结", "url": "/posts/%E5%AE%8F%E5%AE%9A%E4%B9%89-define/", "categories": "语言, C\C++", "tags": "C/C++", "date": "2022-04-14 15:35:00 +0800", "snippet": "在C／C＋＋中，宏定义是由define完成的，宏定义中有几种常见的特殊字符需要我们了解，常用的特殊字符有以下几种： #：在宏展开的时候会将#后面的参数替换成字符串； 字符串化 ##:将前后两个的单词拼接在一起； 连接化 #@:将值序列变为一个字符； 字符化 :将两行连接起来。行连接化我们可以使用这些特殊的字符做一些简单的测试例子：1.# 测试测试代码如下：#include &amp;lt;iostream&amp;gt;#include &amp;lt;stdlib.h&amp;gt;using namespace std;#define PRINT(name) #namei..." }, { "title": "CMake笔记", "url": "/posts/CMake%E7%AC%94%E8%AE%B0/", "categories": "工具, CMake", "tags": "CMake", "date": "2022-04-14 12:53:00 +0800", "snippet": "说明cmake的定义是什么 ？—–高级编译配置工具当多个人用不同的语言或者编译器开发一个项目，最终要输出一个可执行文件或者共享库（dll，so等等）这时候神器就出现了—–CMake！所有操作都是通过编译CMakeLists.txt来完成的—简单官 方网站是 www.cmake.org，可以通过访问官方网站获得更多关于 cmake 的信息学习CMake的目的，为将来处理大型的C/C++/JAVA项目做准备CMake安装1、绝大多数的linux系统已经安装了CMake2、Windows或某些没有安装过的linux系统，去http://www.cmake.org/HTML/Download.h..." }, { "title": "_tmain()和main()", "url": "/posts/_tmain()%E5%92%8Cmain()/", "categories": "语言, C\C++", "tags": "C/C++", "date": "2022-04-13 15:30:00 +0800", "snippet": "首先，这个_tmain()是为了支持unicode所使用的main一个别名而已。既然是别名，应该有宏定义过的，在哪里定义的呢？就在那个让你困惑的里，有这么两行：#include #include 我们可以在头文件里找到_tmain的宏定义#define _tmain main所以，经过预编译以后， _tmain就变成main了main()是标准C++的函数入口。标准C++的程序入口点函数,默认字符编码格式ANSI函数签名为：int main();int main(int argc, char* argv[]);_tmain()是windows提供的对unicode字符集和ANSI字符..." }, { "title": "CMake基本常用语法CMakeLists.txt", "url": "/posts/CMake-%E5%9F%BA%E6%9C%AC%E5%B8%B8%E7%94%A8%E8%AF%AD%E6%B3%95-CMakeLists.txt/", "categories": "工具, CMake", "tags": "CMake", "date": "2022-03-14 17:57:00 +0800", "snippet": "Hello, Worldcmake_minimum_required(VERSION 3.5) # 指定CMake的版本project(hello-world) # 项目名称add_executable(hello helloworld.cpp) # 创建一个可执行程序基本语法文件编码-Encoding官方说明文档:文件编码 在3.0以下的版本，CMake文件必须使用7-bit的ASCII编码，在3.0以后可以使用UTF-8编码 文件的换行符必须使用\\n或\\r\\n注释-Comments官方说明文档:Comments1官方说明文档:Comments2单行注释test # comment..." }, { "title": "Visual Studio 添加外部SDK", "url": "/posts/Visual-Studio-%E6%B7%BB%E5%8A%A0%E5%A4%96%E9%83%A8SDK/", "categories": "语言, C\C++", "tags": "C/C++", "date": "2022-03-09 10:25:00 +0800", "snippet": "Visual Studio 添加外部SDK配置头文件配置lib目录（前两步也可统一用以下这步实现）配置lib名称配置dll目录将dll（动态链接库）放入：C:\\Windows\\System32禁用过期警告" }, { "title": "C/C++", "url": "/posts/C-C++/", "categories": "语言, C\C++", "tags": "C/C++", "date": "2021-07-20 16:29:00 +0800", "snippet": "1、头文件对于#include,编译器先从标准库路径开始搜索filename.h，使得系统文件调用比较快；对于#include&quot;filename.h&quot;，编译器先从用户的工作路径开始搜索filename.h，后去寻找系统路径，使得自定义文件较快。所以在写代码的过程中要根据实际情况选择是&amp;lt;&amp;gt;还是&quot;&quot;头文件的作用有哪些？头文件的作用主要表现为以下两个方面：(1)通过头文件来调用库功能。出于对源代码保密的考虑，源代码不便(或不准)向用户公布，只要向用户提供头文件和二进制的库即可。用户只需要按照头文件中的接口声明来调用库功能，而不..." } ]
