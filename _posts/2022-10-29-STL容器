---
title: STL容器
date: 2022-10-29 20:40
categories: [语言, C\C++]
tags: [C/C++]     # TAG names should always be lowercase
---

# STL容器

## Vector

### 基本使用

(1)头文件 #include<vector>.

(2)创建vector对象，vector<int> vec;

(3)尾部插入数字：vec.push_back(a)

(4)使用下标访问元素，cout<<vec[0]<<endl;记住下标是从0开始的。

(5)使用迭代器访问元素.

```c++
vector<int>::iterator it;
for(it=vec.begin();it!=vec.end();it++)
cout<<*it<<endl;
```

(6)插入元素： vec.insert(vec.begin()+i,a);在第i+1个元素前面插入a;

(7)删除元素：vec.erase(vec.begin()+2);删除第3个元素

vec.erase(vec.begin()+i,vec.end()+j);删除区间[i,j-1];区间从0开始

(8)向量大小:vec.size();

(9)清空:vec.clear();

### C++ vector类有两种使用方式：

#### 第一种：STL方式

vector< string > text;

1）我们向 vector 中插入元素，而不再是索引元素，以及向元素赋值，例如 push_back()操作，就是在 vector 的后面插入一个元素下面的 while 循环从标准输入读入一个字符串序列并每次将一个字符串插入到 vector 中

```C++
string word;
while ( cin >> word )
{
	text.push_back( word );
}
```

虽然我们仍可以用下标操作符来迭代访问元素

```C++
cout << “words read are: \n”;

for ( int ix = 0; ix < text.size(); ++ix )
   cout << text[ ix ] << ’ ‘;

cout << endl;
```

但是 更典型的做法是使用vector 操作集中的begin()和 end()所返回的迭代器 iterator :

```C++
cout << “words read are: \n”;

for ( vector<string>::iterator it = text.begin();
  it != text.end(); ++it )
      cout << *it<< ’ ‘;

cout << endl
//iterator 是标准库中的类，它具有指针的功能
*it; //对迭代器解引用，并访问其指向的实际对象
++it;//向前移动迭代器 it 使其指向下一个元素
```

2） 注意 不要混用这两种习惯用法， 例如，下面的定义
`vector< int > ivec;`
定义了一个空vector 再写这样的语句
`ivec[ 0 ] = 1024;`
就是**错误**的 ，因为 ivec 还没有第一个元素，我们只能索引 vector 中已经存在的元素 size()操作返回 vector 包含的元素的个数。

3）类似地 当我们用一个给定的大小定义一个vector 时，例如 ：
`vector<int> ia( 10 );`
任何一个插入操作都将增加vector 的大小，**而不是覆盖掉**某个现有的元素，这看起来好像是很显然的，但是下面的错误在初学者中并不少见：

```C++
const int size = 7;
int ia[ size ] = { 0, 1, 1, 2, 3, 5, 8 };
vector< int > ivec(size);
for ( int ix = 0; ix < size; ++ix )
	ivec.push_back(ia[ ix ]);
```

程序结束时ivec 包含 14 个元素, ia 的元素从第八个元素开始插入。

#### 第二种：类数组使用

1）定义一个已知长度的 vector ：

```C++
vector< int > ivec( 10 ); //类似数组定义int ia[10 ];
vector< int > ivec2 {1,2,3,4,5,6}//类似数组定义 int ia[ 6 ] = { -2, -1, 0, 1, 2, 1024 };
```

可以通过ivec[索引号] 来访问元素。使用 if ( ivec.empty() ) 判断是否是空，ivec.size()判断元素个数。

2）vector的元素被初始化为与其类型相关的**缺省值**：算术和指针类型的缺省值是 0，对于class 类型，缺省值可通过调用这类的**缺省构造函数**获得，我们还可以为每个元素提供一个**显式的初始值**来完成初始化，例如 ：

```C++
vector< int > ivec( 10, -1 ); //定义了 ivec 它包含十个int型的元素每个元素都被初始化为-1
```

对于内置数组我们可以显式地把数组的元素初始化为一组常量值，例如：

```C++
int ia[ 6 ] = { -2, -1, 0, 1, 2, 1024 };
```

我们不能用同样的方法显式地初始化 vector ，但是可以将 vector 初始化为一个已有数组的全部或一部分，只需指定希望被用来初始化 vector 的数组的开始地址以及数组最末元的下一位置来实现，例如：

```C++
// 把 ia 的 6 个元素拷贝到 ivec 中
vector< int > ivec( ia, ia+6 );
```


被传递给ivec 的两个指针标记了用来初始化对象的值的范围，第二个指针总是指向要拷贝的**末元素的下一位置**，标记出来的元素范围也可以是数组的一个子集，例如

```C++
// 拷贝 3 个元素 ia[2],ia[3], ia[4]
vector< int > ivec( &ia[ 2 ], &ia[ 5 ] );
```

3）与内置数组不同 vector 可以被另一个 vector 初始化或被赋给另一个 vector ，例如：

```c++
vector< string > svec;
void init_and_assign()
{
  // 用另一个 vector 初始化一个 vector
  vector< string > user_names( svec );
  // …

  // 把一个 vector 拷贝给另一个 vector
  svec = user_names;
}
```

### vector使用总结：

1.vector的初始化：

可以有五种方式,举例说明如下：

```C++
vector<int> a(10); //定义了10个整型元素的向量（尖括号中为元素类型名，它可以是任何合法的数据类型），但没有给出初值，其值是不确定的。
vector<int>a(10,1); //定义了10个整型元素的向量,且给出每个元素的初值为1
vector<int>a(b); //用b向量来创建a向量，整体复制性赋值
vector<int>a(b.begin(),b.begin()+3); //定义了a值为b中第0个到第2个（共3个）元素
int b[7]={1,2,3,4,5,9,8};vector<int> a(b,b+7); //从数组中获得初值
```

2.vector对象的几个重要操作，举例说明如下：

```C++
//函数原型：void assign(const_iterator first,const_iterator last);
a.assign(b.begin(), b.begin()+3);//b为向量，将b的0~2个元素构成的向量赋给a
//函数原型：void assign(size_type n,const T& x = T());
a.assign(4,2);//是a只含4个元素，且每个元素为2

a.back();//返回a的最后一个元素
a.front();//返回a的第一个元素
a[i]; //返回a的第i个元素，当且仅当a[i]存在2013-12-07
a.clear();//清空a中的元素
a.empty();//判断a是否为空，空则返回ture,不空则返回false
a.pop_back();//删除a向量的最后一个元素
a.erase(a.begin()+1,a.begin()+3);//删除a中第1个（从第0个算起）到第2个元素，也就是说删除的元素从a.begin()+1算起（包括它）一直到a.begin()+3（不包括它）
a.push_back(5);//在a的最后一个向量后插入一个元素，其值为5
a.insert(a.begin()+1,5);//在a的第1个元素（从第0个算起）的位置插入数值5，如a为1,2,3,4，插入元素后为1,5,2,3,4
a.insert(a.begin()+1,3,5);//在a的第1个元素（从第0个算起）的位置插入3个数，其值都为5
a.insert(a.begin()+1,b+3,b+6);//b为数组，在a的第1个元素（从第0个算起）的位置插入b的第3个元素到第5个元素（不包括b+6），如b为1,2,3,4,5,9,8，插入元素后为1,4,5,9,2,3,4,5,9,8
a.size();//返回a中元素的个数；
a.capacity();//返回a在内存中总共可以容纳的元素个数
a.rezize(10);//将a的现有元素个数调至10个，多则删，少则补，其值随机
a.rezize(10,2);//将a的现有元素个数调至10个，多则删，少则补，其值为2
a.reserve(100);//将a的容量（capacity）扩充至100，也就是说现在测试a.capacity();的时候返回值是100.这种操作只有在需要给a添加大量数据的时候才 显得有意义，因为这将避免内存多次容量扩充操作（当a的容量不足时电脑会自动扩容，当然这必然降低性能）
a.swap(b);//b为向量，将a中的元素和b中的元素进行整体性交换
a==b; //b为向量，向量的比较操作还有!=,>=,<=,>,<
```

初始化：

```C++
vector<int> a; //声明一个int型向量a
vector<int> a(10); //声明一个初始大小为10的向量
vector<int> a(10, 1); //声明一个初始大小为10且初始值都为1的向量
vector<int> b(a); //声明并用向量a初始化向量b
vector<int> b(a.begin(), a.begin()+3);//将a向量中从第0个到第2个(共3个)作为向量b的初始值
int n[] = {1, 2, 3, 4, 5}; vector<int> a(n, n+5); //将数组n的前5个元素作为向量a的初值
vector<int> a(&n[1], &n[4]); //将n[1] - n[4]范围内的元素作为向量a的初值
```

Vector的基本操作（+-）

```C++
a.size() //获取向量中的元素个数
a.empty() //判断向量是否为空
a.clear() //清空向量中的元素
a = b ; //将b向量复制到a向量中
```

比较
保持 ==、!=、>、>=、<、<= 的惯有含义 ;
如: a == b ; //a向量与b向量比较, 相等则返回1

插入 - insert

```C++
a.insert(a.begin(), 1000);//将1000插入到向量a的起始位置前
a.insert(a.begin(), 3, 1000);//将1000分别插入到向量元素位置的0-2处(共3个元素)
vector<int> a(5, 1) ;
vector<int> b(10) ;
b.insert(b.begin(), a.begin(), a.end()) ; //将a.begin(), a.end()之间的全部元素插入到b.begin()前
```

删除 - erase

```C++
b.erase(b.begin());//将起始位置的元素删除
b.erase(b.begin(), b.begin()+3);//将(b.begin(), b.begin()+3)之间的元素删除
```

#### 二维vector的初始化

**Fill Constructor：**

```cpp
#define M 4
#define N 4

// one step, recommended
std::vector<std::vector<int>> matrix(M, std::vector<int>(N, 0));
// two steps
std::vector<int> row(N, 0);
std::vector<std::vector<int>> matrix2(M, row);
```

**resize function：**

```cpp
#define M 4
#define N 4

std::vector<std::vector<int>> matrix(M);
for (int i = 0 ; i < M ; i++)
    matrix[i].resize(N, 0);
std::vector<std::vector<int>> matrix2;
matrix2.resize(M, std::vector<int>(N, 0));
```

**C++ Initializer lists：**

```cpp
std::vector<std::vector<int>> matrix {
    {1, 2, 3, 4},
    {5, 6, 7, 8},
    {9, 10, 11, 12},
    {13, 14, 15, 16}
};
```

## set&unordered_set

参考：[(25条消息) STL中的set使用方法详细！！！！_知足--常乐的博客-CSDN博客_set stl](https://blog.csdn.net/changjiale110/article/details/79108447)

关于set，必须说明的是set关联式容器。set作为一个容器也是用来存储同一数据类型的数据类型，并且能从一个数据集合中取出数据，在set中每个元素的值都唯一，而且系统能根据元素的值自动进行排序。应该注意的是set中数元素的值不能直接被改变。C++ STL中标准关联容器set, multiset, map, multimap内部采用的就是一种非常高效的平衡检索二叉树：红黑树，也成为**RB树(Red-Black Tree)**。RB树的统计性能要好于一般平衡二叉树，所以被STL选择作为了关联容器的内部结构。

 关于set有下面**几个问题**：

（1）为何map和set的插入删除效率比用其他序列容器高？

大部分人说，很简单，因为对于关联容器来说，不需要做内存拷贝和内存移动。说对了，确实如此。set容器内所有元素都是以节点的方式来存储，其节点结构和链表差不多，指向父节点和子节点。结构图可能如下：

 　  A
　  / \
　 B C
　/ \ / \
  D E F G

因此插入的时候只需要稍做变换，把节点的指针指向新的节点就可以了。删除的时候类似，稍做变换后把指向删除节点的指针指向其他节点也OK了。这里的一切操作就是指针换来换去，和内存移动没有关系。

（2）为何每次insert之后，以前保存的iterator不会失效？

iterator这里就相当于指向节点的指针，内存没有变，指向内存的指针怎么会失效呢(当然被删除的那个元素本身已经失效了)。相对于vector来说，每一次删除和插入，指针都有可能失效，调用push_back在尾部插入也是如此。因为为了保证内部数据的连续存放，iterator指向的那块内存在删除和插入过程中可能已经被其他内存覆盖或者内存已经被释放了。即使时push_back的时候，容器内部空间可能不够，需要一块新的更大的内存，只有把以前的内存释放，申请新的更大的内存，复制已有的数据元素到新的内存，最后把需要插入的元素放到最后，那么以前的内存指针自然就不可用了。特别时在和find等算法在一起使用的时候，牢记这个原则：不要使用过期的iterator。

（3）当数据元素增多时，set的插入和搜索速度变化如何？

如果你知道log2的关系你应该就彻底了解这个答案。在set中查找是使用二分查找，也就是说，如果有16个元素，最多需要比较4次就能找到结果，有32个元素，最多比较5次。那么有10000个呢？最多比较的次数为log10000，最多为14次，如果是20000个元素呢？最多不过15次。看见了吧，当数据量增大一倍的时候，搜索次数只不过多了1次，多了1/14的搜索时间而已。你明白这个道理后，就可以安心往里面放入元素了。

### 初始化

```c++
unordered_set<int> set1; //创建空set
unordered_set<int> set2(set1);    //拷贝构造
unordered_set<int> set3(set1.begin(), set1.end());    //迭代器构造
unordered_set<int> set4(arr,arr+5);    //数组构造
unordered_set<int> set5(move(set2));    //移动构造
unordered_set<int> set6 {1,2,10,10};//使用initializer_list初始化
```

### vector转set&set转vector

```C++
#include<set>
#include<vector>
#include<iostream>
using namespace std;


int main()
{
    vector<int> vec;
    vec = { 1, 2, 3, 4, 8, 9, 3, 2, 1, 0, 4, 8 };
    set<int> st(vec.begin(), vec.end());//可以推广到STL的其他容器
    vec.assign(st.begin(), st.end());

    vector<int>::iterator it;
    for (it = vec.begin(); it != vec.end(); it++)
        cout << *it<<endl;

    return 0;
}
```



### 常用操作

```C++
set1.find(2);    //查找2，找到返回迭代器，失败返回end()
set1.count(2);    //返回指2出现的次数，0或1
set1.emplace(3);    //使用转换移动构造函数，返回pair<unordered_set<int>::iterator, bool>
set1.insert(3);    //插入元素，返回pair<unordered_set<int>::iterator, bool>
set1.insert({1,2,3});    //使用initializer_list插入元素
set1.insert(set1.end(), 4);//指定插入位置，如果位置正确会减少插入时间，返回指向插入元素的迭代器
set1.insert(set2.begin(), set2.end());//使用范围迭代器插入
set1.erase(1);	    //删除操作，成功返回1，失败返回0
set1.erase(set1.find(1));	    //删除操作，成功返回下一个pair的迭代器
set1.erase(set1.begin(), set1.end());    //删除set1的所有元素，返回指向end的迭代器
set1.empty();        //是否为空
set1.size();        //大小
set1.bucket_count();    //返回容器中的桶数
set1.bucket_size(1);    //返回1号桶中的元素数
set1.bucket(1);    //1在哪一个桶
set1.load_factor();    //负载因子，返回每个桶元素的平均数，即size/float(bucket_count);
set1.max_load_factor();//返回最大负载因子
set1.max_load_factor(2);//设置最大负载因子为2，rehash(0)表示强制rehash
set1.rehash(20);//设置桶的数量为20，并且重新rehash
set1.reserve(20);//将容器中的桶数设置为最适合元素个数，如果20大于当前的bucket_count乘max_load_factor，则增加容器的bucket_count并强制重新哈希。如果20小于该值，则该功能可能无效。
unordered_set<int>::iterator it = set1.begin();	    //返回指向set1首元素的迭代器
unordered_set<int>::const_iterator c_it = set1.cbegin();	    //返回指向set1首元素的常量迭代器
unordered_set<int>::local_iterator it = set1.begin(1);//返回1号桶中的首元素迭代器
unordered_set<int>::const_local_iterator c_it = set1.cbegin(1);//返回1号桶中的首元素的常量迭代器
pair<unordered_set<int>::iterator, unordered_set<int>::iterator> it = set1.equal_range(1);//返回一个pair，pair里面第一个变量是lower_bound返回的迭代器，第二个迭代器是upper_bound返回的迭代器
set1.clear();        //清空
```

### 其他操作

```C++
set1.emplace_hint(set1.end(),12);//提示插入的位置，如果指定的位置是真正要插入的位置，会减少插入时间
set1.swap(set2);    //交换，要求两个set的类型相同
set1.get_allocator();    //返回分配器
set1.max_size();          //返回可以容纳的最大元素个数
set1.max_bucket_count();    //返回可以容纳的最大桶数
unordered_set<int>::hasher hash = set1.hash_function();//返回hash函数
unordered_set<int>::key_equal eql = set1.key_eq();///返回比较元素是否相等的函数，接收两个int参数
set1.merge(set2);    //合并两个unordered_set，C++17支持
```

### 遍历

1、迭代器

```C++
for(unordered_set<int>::iterator it = set1.begin(); it != set1.end(); ++it)
	cout << *it << " ";
//注意，除了vector和string外的stl容器都不支持*(it + i)的访问方式
```

2、C11

```C++
for(int x : set1)
    cout << x << " ";
```
